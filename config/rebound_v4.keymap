/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/rgb.h>

#define CMK 0
#define SYM 1
#define NUM 2
#define FUN 3
#define NAV 4

&caps_word {
   continue-list = <UNDERSCORE MINUS BACKSPACE>;
};



/ {

    behaviors {
        skq: sticky_key_quick_release {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_KEY_QUICK_RELEASE";
            #binding-cells = <1>;
            bindings = <&kp>;
            release-after-ms = <1000>;
            quick-release;
        };
    };

    combos {
        compatible = "zmk,combos";
        combo_wf_tab {
            layers = <0 1 2 3 4 5>;
            timeout-ms = <50>;
            // W + F
            key-positions = <2 3>;
            bindings = <&kp TAB>;
        };
        combo_uy_del {
            layers = <0 1 2 3 4 5>;
            timeout-ms = <50>;
            // U + Y
            key-positions = <8 9>;
            bindings = <&kp DEL>;
        };
        combo_gm_capsword {
            layers = <0 1 2 3 4 5>;
            timeout-ms = <100>;
            // G + M
            key-positions = <17 19>;
            bindings = <&caps_word>;
        };
        combo_xc_ctrl {
            layers = <0 1 2 3 4 5>;
            timeout-ms = <50>;
            // Z + X
            key-positions = <27 28>;
            bindings = <&sk LCTL>;
        };
        combo_commadot_shift {
            layers = <0 1 2 3 4 5>;
            timeout-ms = <50>;
            // , + . = shift
            key-positions = <34 35>;
            bindings = <&skq LSHFT>;
        };
        combo_cmd {
            layers = <0 1 2 3 4 5>;
            timeout-ms = <50>;
            // SYM + SPC = CMD
            key-positions = <42 43>;
            bindings = <&sk LCMD>;
        };
        combo_opt {
            layers = <0 1 2 3 4 5>;
            timeout-ms = <50>;
            // NUM + ENT = OPT
            key-positions = <45 46>;
            bindings = <&sk LALT>;
        };
        combo_ent {
            layers = <0 1 2 3 4 5>;
            timeout-ms = <80>; 
            // SPC + BSPC = ENT
            key-positions = <43 45>;
            bindings = <&kp RET>;
        };
    };
};

/ {

        keymap {
        compatible = "zmk,keymap";

        colemak_layer {                      					  
		bindings = <
        &rgb_ug RGB_TOG     &kp Q        &kp W     &kp F       &kp P    &kp B                &kp J     &kp L     &kp U       &kp Y       &kp SQT    &none
        &none     &kp A        &kp R     &kp S       &kp T    &kp G      &kp DEL   &kp M     &kp N     &kp E       &kp I       &kp O      &none
        &none     &kp Z        &kp X     &kp C       &kp D    &kp V     &kp LSHFT  &kp K     &kp H     &kp COMMA   &kp DOT     &mo FUN    &none
        &none     &none        &none     &none       &mo SYM  &kp SPACE &kp C_MUTE &lt BSPC NAV  &mo NUM   &none       &none       &none      &none
                        >;
			sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
                };

        symbol_layer {
                bindings = <
        &none &none     &kp BSLH    &kp PRCNT &kp DLLR  &none                  &none   &kp CARET       &kp LBKT        &kp RBKT        &none    &none
        &none &kp STAR  &kp LPAR    &kp RPAR  &kp COLON &none   &kp C_AL_LOCK  &none   &kp SEMI        &kp LBRC        &kp RBRC        &none    &none
        &none &none     &kp GRAVE   &kp AT    &kp AMPS  &none   &kp LSHFT      &none   &kp HASH        &kp LT          &kp GT          &none    &none
        &none &none     &none       &trans    &none  &kp SPACE       &none        &kp BSPC     &none        &kp ESC        &none        &none        &trans
                                >;
                        sensor-bindings = <&inc_dec_kp C_AC_SCROLL_UP C_AC_SCROLL_DOWN>;
                };

        number_layer {
                bindings = <
        &none &none     &kp N4 &kp N5 &kp N6 &none                          &none      &kp PIPE &kp MINUS &kp FSLH  &none &none
        &none &kp DOT   &kp N1 &kp N2 &kp N3 &none          &kp C_SLEEP     &none      &kp DQT  &kp UNDER &kp EQUAL &mo NAV  &none 
        &none &kp TILDE  &kp N7 &kp N8 &kp N9 &none          &none           &none      &kp PLUS &kp QMARK &kp EXCL  &kp DEL &none
        &none &none     &none  &none &kp N0  &kp SPACE      &none           &kp BSPC   &none    &none     &none     &none   &none
                                >;
                        
                };

        fun_layer {
                bindings = <
        &none &none    &kp F4 &kp F5 &kp F6 &kp F10                 &bt BT_SEL 0 &bt BT_SEL 1  &out OUT_USB &out OUT_BLE &bt BT_CLR   &none
        &none &kp CAPS &kp F1 &kp F2 &kp F3 &kp F11    &kp C_POWER  &kp K_MUTE   &kp C_VOL_DN  &kp C_VOL_UP &kp C_BRI_DN &kp C_BRI_UP &none
        &none &trans   &kp F7 &kp F8 &kp F9 &kp F12    &none        &none        &none         &none        &none        &none        &none
        &trans &trans  &trans &trans &trans &trans     &none        &trans       &trans        &trans       &trans       &trans       &trans
                        >;
                };         
        nav_layer {
                bindings = <
        &none &none     &none    &none    &none &none          &none    &none     &none     &none     &none  &none 
        &none &none     &none    &none    &none &none  &none   &kp LEFT &kp DOWN  &kp UP    &kp RIGHT &trans &none 
        &none &none     &none    &none    &none &none  &none   &kp HOME &kp PG_DN &kp PG_UP &kp END   &none  &none 
        &none &none     &none    &trans   &none &trans &none   &trans   &none     &trans    &none     &none    &trans
                        >;
                };
        };
};
